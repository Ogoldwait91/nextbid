import "dart:convert";
import "dart:io";
import "package:http/http.dart" as http;
import "package:http_parser/http_parser.dart" as http_parser;

class ApiClient {
  final String base;
  const ApiClient({this.base = "http://127.0.0.1:8000"});

  // ------------ low-level helpers ------------
  Future<Map<String, dynamic>> getJson(String path) async {
    final r = await http.get(Uri.parse("$base$path"));
    if (r.statusCode >= 200 && r.statusCode < 300) {
      return json.decode(r.body) as Map<String, dynamic>;
    }
    throw Exception("GET $path failed: ${r.statusCode}");
  }

  Future<Map<String, dynamic>> postJson(
    String path,
    Map<String, dynamic> body,
  ) async {
    final r = await http.post(
      Uri.parse("$base$path"),
      headers: {"Content-Type": "application/json"},
      body: json.encode(body),
    );
    if (r.statusCode >= 200 && r.statusCode < 300) {
      return json.decode(r.body) as Map<String, dynamic>;
    }
    throw Exception("POST $path failed: ${r.statusCode}");
  }

  Future<Map<String, dynamic>> deleteJson(String path) async {
    final r = await http.delete(Uri.parse("$base$path"));
    if (r.statusCode >= 200 && r.statusCode < 300) {
      return json.decode(r.body) as Map<String, dynamic>;
    }
    throw Exception("DELETE $path failed: ${r.statusCode}");
  }

  // ------------ existing endpoints ------------
  Future<Map<String, dynamic>> credit(String month) =>
      getJson("/credit/$month");
  Future<Map<String, dynamic>> calendar(String month) =>
      getJson("/calendar/$month");

  Future<Map<String, dynamic>> statusResolve(String staffNo, String crewCode) {
    final s = Uri.encodeQueryComponent(staffNo);
    final c = Uri.encodeQueryComponent(crewCode);
    return getJson("/status/resolve?staff_no=$s&crew_code=$c");
  }

  Future<Map<String, dynamic>> validateBidServer(String text) =>
      postJson("/bid/validate", {"text": text});

  Future<Map<String, dynamic>> exportBidServer(String text) =>
      postJson("/bid/export", {"text": text});

  Future<Map<String, dynamic>> privacyDownload() => getJson("/privacy/data");
  Future<Map<String, dynamic>> privacyDelete() => deleteJson("/privacy/data");

  Future<Map<String, dynamic>> reserves(String month) =>
      getJson("/reserves/$month");

  // ------------ new: phase-1 helpers ------------
  Future<Map<String, dynamic>> setPrivacyConsent(bool consent) =>
      postJson("/privacy/consent", {"consent": consent});

  Future<Map<String, dynamic>> getPrivacyConsent() =>
      getJson("/privacy/consent");

  Future<Map<String, dynamic>> getCohortCompetitiveness(String month) =>
      getJson("/cohort/competitiveness?month=$month");

  Future<Map<String, dynamic>> fetchPairings(String month, {int limit = 3}) =>
      getJson("/pairings/$month?limit=$limit");

  Future<Map<String, dynamic>> simulateBid(String text) =>
      postJson("/bid/simulate", {"text": text});

  /// Multipart upload of a bid .txt file
  Future<Map<String, dynamic>> uploadBidFile(File file) async {
    final uri = Uri.parse("$base/bid/upload");
    final req = http.MultipartRequest("POST", uri);
    // Use MediaType from http_parser (aliased as http_parser)
    req.files.add(
      await http.MultipartFile.fromPath(
        "file",
        file.path,
        contentType: http_parser.MediaType("text", "plain"),
      ),
    );
    final streamed = await req.send();
    final resp = await http.Response.fromStream(streamed);
    if (resp.statusCode >= 200 && resp.statusCode < 300) {
      return json.decode(resp.body) as Map<String, dynamic>;
    }
    throw Exception("POST /bid/upload failed: ${resp.statusCode}");
  }
}
